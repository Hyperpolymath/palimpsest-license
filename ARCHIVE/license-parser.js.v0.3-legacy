// palimpsest-license/implementations/api/js/license-parser.js

/**
 * @module PalimpsestParser
 * @description
 * Provides a JavaScript API to parse, validate, and interpret Palimpsest License v0.3
 * documents, AGI Training Consent Agreements, Synthetic Lineage Tags, and AIBDP manifests.
 * Leverages a WebAssembly (WASM) module for high-performance parsing and complex rule evaluation.
 */

// --- 1. WASM Module Initialization ---
// This assumes your WASM bundle creates a 'palimpsest_license_wasm.js'
// and 'palimpsest_license_wasm_bg.wasm' pair in the 'wasm/' subdirectory.
import init, {
  parse_aibdp_manifest_wasm,
  parse_synthetic_lineage_tag_wasm,
  check_agi_consent_wasm,
  get_license_summary_wasm,
  // Add more WASM functions as your core logic evolves
} from '../../../wasm/palimpsest_license_wasm.js';

/**
 * @class PalimpsestParser
 * @description
 * Main class for interacting with the Palimpsest License parsing and validation logic.
 * Ensures the WASM module is loaded before operations.
 */
class PalimpsestParser {
  static #wasmInitialized = false;
  static #initializationPromise = null;

  /**
   * Initializes the WebAssembly module. This must be called once before any
   * other parser methods. It's safe to call multiple times.
   * @returns {Promise<void>} A promise that resolves when the WASM module is ready.
   */
  static async initialize() {
    if (this.#wasmInitialized) {
      return Promise.resolve();
    }
    if (this.#initializationPromise) {
      return this.#initializationPromise;
    }

    this.#initializationPromise = new Promise(async (resolve, reject) => {
      try {
        // The 'init()' function is generated by wasm-bindgen and loads the .wasm file.
        await init();
        this.#wasmInitialized = true;
        console.log('PalimpsestParser: WebAssembly module initialized successfully.');
        resolve();
      } catch (error) {
        console.error('PalimpsestParser: Failed to initialize WebAssembly module:', error);
        this.#initializationPromise = null; // Allow retries
        reject(new Error('Failed to load Palimpsest WASM module.'));
      }
    });
    return this.#initializationPromise;
  }

  /**
   * Internal helper to ensure WASM is initialized before calling a WASM function.
   * @private
   * @returns {Promise<void>}
   */
  static async #ensureWasmInitialized() {
    if (!this.#wasmInitialized) {
      console.warn('PalimpsestParser: WASM module not initialized. Attempting to initialize...');
      await this.initialize();
    }
  }

  // --- 2. Core Parsing & Validation Methods ---

  /**
   * Parses an AIBDP manifest JSON string and validates it against the AIBDP schema.
   * @param {string} jsonString The JSON string of the AIBDP manifest.
   * @returns {Promise<{isValid: boolean, data: object, errors: string[]}>}
   */
  static async parseAIBDPManifest(jsonString) {
    await this.#ensureWasmInitialized();
    try {
      const result = parse_aibdp_manifest_wasm(jsonString);
      return JSON.parse(result); // WASM returns stringified JSON
    } catch (error) {
      console.error('PalimpsestParser: Error parsing AIBDP manifest:', error);
      return { isValid: false, data: null, errors: [error.message || 'Unknown parsing error'] };
    }
  }

  /**
   * Parses a Synthetic Lineage Tag XML string and validates it against the Palimpsest Lineage schema.
   * @param {string} xmlString The XML string of the Synthetic Lineage Tag.
   * @returns {Promise<{isValid: boolean, data: object, errors: string[]}>}
   */
  static async parseSyntheticLineageTag(xmlString) {
    await this.#ensureWasmInitialized();
    try {
      const result = parse_synthetic_lineage_tag_wasm(xmlString);
      return JSON.parse(result); // WASM returns stringified JSON
    } catch (error) {
      console.error('PalimpsestParser: Error parsing Synthetic Lineage Tag:', error);
      return { isValid: false, data: null, errors: [error.message || 'Unknown parsing error'] };
    }
  }

  /**
   * Evaluates a proposed AI use against a specific AGI Training Consent Agreement.
   * This function embodies the complex conditional logic, including checks for:
   * AI System Type, Collective Licensing, Cultural Heritage, AI Governance Audits, etc.
   *
   * @param {object} consentAgreementDetails - Parsed AGI Training Consent Agreement (JSON representation).
   * @param {object} proposedUseDetails - Details of the proposed AI use (e.g., { type: 'training', ai_model: 'GPT-X', commercial: true, collective_consent_present: false }).
   * @returns {Promise<{allowed: boolean, reason: string, requiredRemediation?: string[]}>}
   */
  static async checkAGIConsent(consentAgreementDetails, proposedUseDetails) {
    await this.#ensureWasmInitialized();
    try {
      // WASM function will take stringified JSON inputs and return stringified JSON output
      const result = check_agi_consent_wasm(
        JSON.stringify(consentAgreementDetails),
        JSON.stringify(proposedUseDetails)
      );
      return JSON.parse(result);
    } catch (error) {
      console.error('PalimpsestParser: Error checking AGI consent:', error);
      return { allowed: false, reason: `Consent check failed: ${error.message || 'Internal error.'}` };
    }
  }

  /**
   * Extracts key summary information from a full Palimpsest License text.
   * @param {string} licenseText - The full text of the Palimpsest License (English or Dutch).
   * @returns {Promise<{isValid: boolean, version: string, jurisdiction: string, keyProtections: string[], errors?: string[]}>}
   */
  static async getLicenseSummary(licenseText) {
    await this.#ensureWasmInitialized();
    try {
      const result = get_license_summary_wasm(licenseText);
      return JSON.parse(result);
    } catch (error) {
      console.error('PalimpsestParser: Error getting license summary:', error);
      return { isValid: false, errors: [error.message || 'Could not parse license summary.'] };
    }
  }

  // --- 3. Utility Methods ---

  /**
   * Helper to validate if a given string is valid JSON.
   * @param {string} str - The string to validate.
   * @returns {boolean} True if the string is valid JSON, false otherwise.
   */
  static isValidJson(str) {
    try {
      JSON.parse(str);
      return true;
    } catch (e) {
      return false;
    }
  }

  // Add more utility methods as needed, e.g., to generate AIBDP headers, etc.
}

export default PalimpsestParser;